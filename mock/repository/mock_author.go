// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/author.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	model "kumparan-tech-test/internal/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorRepo is a mock of AuthorRepo interface.
type MockAuthorRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepoMockRecorder
}

// MockAuthorRepoMockRecorder is the mock recorder for MockAuthorRepo.
type MockAuthorRepoMockRecorder struct {
	mock *MockAuthorRepo
}

// NewMockAuthorRepo creates a new mock instance.
func NewMockAuthorRepo(ctrl *gomock.Controller) *MockAuthorRepo {
	mock := &MockAuthorRepo{ctrl: ctrl}
	mock.recorder = &MockAuthorRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepo) EXPECT() *MockAuthorRepoMockRecorder {
	return m.recorder
}

// GetAuthorByID mocks base method.
func (m *MockAuthorRepo) GetAuthorByID(ctx context.Context, req string) (*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorByID", ctx, req)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByID indicates an expected call of GetAuthorByID.
func (mr *MockAuthorRepoMockRecorder) GetAuthorByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByID", reflect.TypeOf((*MockAuthorRepo)(nil).GetAuthorByID), ctx, req)
}

// GetAuthorByIDs mocks base method.
func (m *MockAuthorRepo) GetAuthorByIDs(ctx context.Context, req []string) ([]*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorByIDs", ctx, req)
	ret0, _ := ret[0].([]*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByIDs indicates an expected call of GetAuthorByIDs.
func (mr *MockAuthorRepoMockRecorder) GetAuthorByIDs(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByIDs", reflect.TypeOf((*MockAuthorRepo)(nil).GetAuthorByIDs), ctx, req)
}
